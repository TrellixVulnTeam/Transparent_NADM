"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const document_scanner_view_1 = __importDefault(require("./document-scanner-view"));
const worker_bridge_1 = require("./worker/worker-bridge");
const LicenseInfo_1 = require("./model/response/LicenseInfo");
class ScanbotSDK {
    static initialize(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const sdk = new ScanbotSDK();
            const engine = options.engine || ScanbotSDK.defaultEnginePath;
            sdk.bridge = yield worker_bridge_1.WorkerBridge.initialize(engine);
            const args = [options.licenseKey, engine, window.location.hostname];
            sdk.initialized = yield sdk.bridge.post('initialize', args);
            return sdk;
        });
    }
    getLicenseInfo() {
        return __awaiter(this, void 0, void 0, function* () {
            const result = yield this.bridge.post('getLicenseInfo', []);
            return LicenseInfo_1.LicenseInfo.fromJson(result);
        });
    }
    createDocumentScanner(configuration) {
        return __awaiter(this, void 0, void 0, function* () {
            const controller = yield document_scanner_view_1.default.create(configuration, this.bridge);
            return controller;
        });
    }
}
exports.default = ScanbotSDK;
ScanbotSDK.defaultEnginePath = '';
