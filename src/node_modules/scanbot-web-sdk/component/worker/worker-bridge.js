"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkerBridge = void 0;
const constants_1 = require("../utils/constants");
class WorkerBridge {
    constructor() {
        this.ASM_JS = "ScanbotSDK.Core.js";
    }
    static initialize(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const bridge = new WorkerBridge();
            if (!path) {
                path = constants_1.Constants.CDN_PATH;
            }
            path += bridge.ASM_JS;
            bridge.continuations = {};
            if (bridge.isRemote(path)) {
                const blob = new Blob([`importScripts("${path}")`]);
                bridge.instance = new Worker(URL.createObjectURL(blob));
            }
            else {
                bridge.instance = new Worker(path);
            }
            const context = bridge;
            bridge.instance.onmessage = function (e) {
                const { ticket, result, error } = e.data;
                const { resolve, reject } = context.continuations[ticket];
                delete context.continuations[ticket];
                if (error) {
                    reject(error);
                }
                else {
                    resolve(result);
                }
            };
            return bridge;
        });
    }
    post(command, args) {
        return new Promise((resolve, reject) => {
            const ticket = Math.random().toString(36);
            this.continuations[ticket] = { resolve, reject };
            this.instance.postMessage({ command, args, ticket });
        });
    }
    isRemote(path) {
        return path.indexOf("http") !== -1;
    }
}
exports.WorkerBridge = WorkerBridge;
