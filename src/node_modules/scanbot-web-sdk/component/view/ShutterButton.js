"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShutterButton = exports.ShutterButtonProps = void 0;
const compat_1 = __importDefault(require("preact/compat"));
const preact_1 = require("preact");
require("../styles/shutter.css");
const classnames_1 = __importDefault(require("classnames"));
class ShutterButtonProps {
}
exports.ShutterButtonProps = ShutterButtonProps;
class AnimationSynchronizer {
    constructor(animationClass) {
        this.lastTime = 0;
        this.lastDuration = 0;
        this.t = 0;
        this.element = null;
        this.animationClass = '';
        this.animationClass = animationClass;
    }
    setDuration(duration) {
        const currentTime = Date.now() / 1000;
        const diffTime = currentTime - this.lastTime;
        if (this.lastDuration) {
            this.t += (diffTime % this.lastDuration) / this.lastDuration;
            this.t -= this.t | 0;
        }
        const delay = -duration * this.t;
        if (this.element) {
            this.element.style.animationDuration = `${duration}s`;
            this.element.style.animationDelay = `${delay}s`;
            this.element.classList.remove(this.animationClass);
            void this.element.offsetHeight;
            this.element.classList.add(this.animationClass);
        }
        this.lastTime = currentTime;
        this.lastDuration = duration;
    }
}
class ShutterButton extends compat_1.default.Component {
    constructor() {
        super(...arguments);
        this.inner1 = new AnimationSynchronizer('scanbot-shutter-rotate');
        this.inner2 = new AnimationSynchronizer('scanbot-shutter-rotate');
    }
    render() {
        return (preact_1.h("div", { className: "scanbot-shutter-button", onClick: this.props.onClick },
            this.captureBackground(),
            this.captureInnerCircle(),
            this.captureSearchingInner1(),
            this.captureSearchingInner2()));
    }
    updateAnimationSpeed(action) {
        if (action == 'searching') {
            this.inner1.setDuration(3);
            this.inner2.setDuration(2);
        }
        else {
            this.inner1.setDuration(1.5);
            this.inner2.setDuration(0.75);
        }
    }
    componentDidMount() {
        this.updateAnimationSpeed(this.props.action);
    }
    componentDidUpdate() {
        this.updateAnimationSpeed(this.props.action);
    }
    captureBackground() {
        return this.svgBase(null, preact_1.h("g", { fill: "none", fillRule: "evenodd", stroke: "none", strokeWidth: "1" }, this.path("M32 0c17.673 0 32 14.327 32 32 0 17.673-14.327 32-32 32C14.327 64 0 49.673 0 32 " +
            "0 14.327 14.327 0 32 0zm0 3C15.984 3 3 15.984 3 32s12.984 29 29 29 29-12.984 29-29S48.016 3 32 3z")));
    }
    captureInnerCircle() {
        const { action } = this.props;
        return this.svgBase({
            'scanbot-shutter-button-part': true,
            'scanbot-shutter-fade-in': action == 'processing' || action == 'manual',
            'scanbot-shutter-fade-out': action == 'searching' || action == 'capturing',
            'scanbot-shutter-pulse-fast': action == 'processing'
        }, preact_1.h("g", { fill: "none", fillRule: "evenodd", stroke: "none", strokeWidth: "1" },
            preact_1.h("circle", { cx: "32", cy: "32", r: "24", fill: this.props.color, fillRule: "nonzero" })));
    }
    captureSearchingInner1() {
        const { action } = this.props;
        return this.svgBase({
            'scanbot-shutter-button-part': true,
            'scanbot-shutter-fade-in': action == 'searching' || action == 'capturing',
            'scanbot-shutter-fade-out': action == 'processing' || action == 'manual',
        }, preact_1.h("g", { fill: "none", fillOpacity: "0.7", fillRule: "evenodd", stroke: "none", strokeWidth: "1" }, this.path("M44.24 51.476a1 1 0 01-1.066-1.692A20.981 20.981 0 0053 " +
            "32c0-11.598-9.402-21-21-21a1 1 0 010-2c12.703 0 23 10.297 23 23a22.98 22.98 0 01-10.76 19.476z")), ref => { this.inner1.element = ref; });
    }
    captureSearchingInner2() {
        const { action } = this.props;
        return this.svgBase({
            'scanbot-shutter-button-part': true,
            'scanbot-shutter-fade-in': action == 'searching' || action == 'capturing',
            'scanbot-shutter-fade-out': action == 'processing' || action == 'manual',
        }, preact_1.h("g", { fill: "none", fillOpacity: "0.4", fillRule: "evenodd", stroke: "none", strokeWidth: "1" }, this.path("M46.624 35.35a1 1 0 01-1.95-.445C44.89 33.96 45 32.988 45 " +
            "32c0-7.18-5.82-13-13-13a1 1 0 010-2c8.284 0 15 6.716 15 15 0 1.138-.127 2.26-.376 3.35z")), ref => { this.inner2.element = ref; });
    }
    path(definition) {
        return preact_1.h("path", { fill: this.props.color, fillRule: "nonzero", d: definition });
    }
    svgBase(classes, child, ref = undefined) {
        return preact_1.h("div", { class: classnames_1.default(classes), ref: ref },
            preact_1.h("svg", { xmlns: "http://www.w3.org/2000/svg", width: "64", height: "64", viewBox: "0 0 64 64" }, child));
    }
}
exports.ShutterButton = ShutterButton;
